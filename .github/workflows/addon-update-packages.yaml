name: Run Package updates

# yamllint disable-line rule:truthy
on:
  workflow_call:
    secrets:
      token:
        required: true

concurrency:
  group: update-packages
  cancel-in-progress: false

jobs:
  information:
    name: ℹ️ Gather add-on information
    runs-on: ubuntu-latest
    outputs:
      addon-folder: ${{ steps.information.outputs.target }}
      os-architectures: ${{ steps.os-info.outputs.architectures }}
      os-version: ${{ steps.os-info.outputs.version }}
    steps:
      - name: ↩️ Checkout
        uses: actions/checkout@v4

      - name: ℹ️ Gather addon info
        id: information
        uses: frenck/action-addon-information@v1

      - name: ℹ️ Determine OS information
        id: os-info
        shell: bash
        run: |
          first_build_image=$(yq e '.build_from | to_entries | .[0].value' ${{ steps.information.outputs.build-file }})

          echo "build image for detection: $first_build_image"

          is_alpine_image=$(echo $first_build_image | grep -q '/.*-base:' && echo "true" || echo "false")
          is_debian_image=$(echo $first_build_image | grep -q '/.*-base-debian:' && echo "true" || echo "false")

          echo "alpine: $is_alpine_image | debian: $is_debian_image"

          version_tag=$(echo $first_build_image | awk -F':' '{print $2}')

          echo "os version: $version_tag"
          echo "version=${version_tag}" >> "$GITHUB_OUTPUT"

          architectures=()

          for arch in "${{ fromJson(steps.information.outputs.architectures) }}"; do
            if [[ "$is_alpine_image" = "true" ]]; then
              if [[ "$arch" = "amd64" ]]; then
                architectures+=("x86_64")
              elif [[ "$arch" = "i386" ]]; then
                architectures+=("x86")
              elif [[ "$arch" = "armhf" ]]; then
                architectures+=("armhf")
              elif [[ "$arch" = "armv7" ]]; then
                architectures+=("armv7")
              elif [[ "$arch" = "aarch64" ]]; then
                architectures+=("aarch64")
              fi

            elif [[ "$is_debian_image" = "true" ]]; then
              if [[ "$arch" = "amd64" ]]; then
                architectures+=("amd64")
              elif [[ "$arch" = "i386" ]]; then
                architectures+=("i386")
              elif [[ "$arch" = "armhf" ]]; then
                architectures+=("armhf")
              elif [[ "$arch" = "armv7" ]]; then
                architectures+=("arm64")
              elif [[ "$arch" = "aarch64" ]]; then
                architectures+=("aarch64")
              fi
              
            else
              echo "::error ::Could not determine os of build images"
              exit 1
            fi
          done

          echo "os architectures: ${architectures[*]}"
          echo "architectures=${architectures[*]}" >> "$GITHUB_OUTPUT"

  check-for-updates:
    name: Check for updates
    runs-on: ubuntu-latest
    needs:
      - information
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: ↩️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Set git bot user
        shell: bash
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com

      - name: 🚀 Run Updater
        uses: Poeschl/container-package-updater@v3
        with:
          token: ${{ secrets.TOKEN }}
          containerFile: ${{ needs.information.outputs.addon-folder }}/Dockerfile
          osVersion: ${{ needs.information.outputs.os-version }}
          architectures: $ {{ needs.information.outputs.os-architectures }}
